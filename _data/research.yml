# research.yml gives research project entries used on the Research page

- project: Evolving event-driven programs with SignalGP
  image: "/imgs/signalgp.svg"
  image_pos: "bottom"
  description: |
    Genetic programming (GP) is the application of natural principles to evolve
    computer programs rather than by writing them by hand. 
    The types of programs that are easily evolvable depends on the underlying
    programming representation - *i.e.*, the way we organize and interpet programs.
    
    SignalGP is a new GP technique designed to give evolution direct access to the
    event-driven programming paradigm where computations are triggered response to 
    signals from the environment, from other agents, or that are internally generated. 
    I designed and developed the initial version of SignalGP in 2017, resulting 
    in a [paper](https://doi.org/10.1145/3205455.3205523) and a talk at GECCO 2018
    where I demonstrate the value of giving evolution direct access to the event-driven
    paradigm.
    
    I am currently working on several extensions to the SignalGP representation,
    such as function regulation, multi-representation SignalGP, and multi-level/hierarchical
    SignalGP.
        
    

- project: Major transitions in individuality
  image: "/imgs/majortrans.svg"
  image_pos: "right"
  description: |
    Major transitions in individuality redefine what it means to be
    an individual: formerly independent individuals unite to form a new, more
    complex lifeform. Examples include the evolution of eukaryotes, multicellularity,
    and eusocial insect colonies. From a computational perspective, major transitions
    in individuality result in distributed systems.

    The goal of this research is to develop a digital model for studying biological
    evolutionary transitions, allowing us to ask general questions about their dynamics.
    In the context of evolutionary computation, a system capable of transitions
    in individuality would be useful for allowing evolution to incrementally build
    distributed solutions.
    I am currently working to extend the SignalGP represention to allow co-evolving
    programs to unite to form hiearchically organized programs.

- project: Exploring genetic programming systems with MAP-Elites
  image: "/imgs/mape4gp.svg"
  image_pos: "left"
  image_is_figure: true
  figure_caption: |
    Example heat map of the optimal SignalGP programs evolved using 50 replicates
    of MAP-Elites, showing that below a certain 'similarity threhold' (how closely
    signal tags must match function tags in order for the signal to trigger
    the function) this particular
    problem is unlikely to be solved with less than approximately 20 functions.
    See [this paper](https://doi.org/10.7287/peerj.preprints.27122v1) for full figure context.
  description: |
    <blockquote class="blockquote"><small>
    MAP-Elites is an evolutionary computation technique that has proven
    valuable for exploring and illuminating the genotype-phenotype space of a computational
    problem. In MAP-Elites, a population is structured based on phenotypic
    traits of prospective solutions; each cell represents a distinct combination of traits
    and maintains only the most fit organism found with those traits. The resulting map
    of trait combinations allows the user to develop a better understanding of how each
    trait relates to fitness and how traits interact.
    <footer class="blockquote-footer"><a href="https://doi.org/10.7287/peerj.preprints.27154v1">2018 GPTP contribution by Emily Dolson, Alexander
    Lalejini, and Charles Ofria</a></footer>
    </small></blockquote>

    If we define a MAP-Elites map with traits associated with different aspects
    of our genetic programming representation (*e.g.*, functions, program length, *etc*.),
    we can use MAP-Elites as a tool to explore how different aspects of different
    representations interact across different problems. Are there trade-offs
    between different aspects of our representation? Are there parts of representation-space
    that are unlikely to yield solutions? Exploring our GP representations in this
    way may inform how we configure things such as variation/mutation or selection operators.

    This project is an ongoing collaboration with fellow devolab student, [Emily Dolson](http://emilyldolson.com).

    

- project: The evolution of phenotypic plasticity and gene regulation
  image: "/imgs/evoplast.svg"
  image_pos: "bottom"
  image_is_figure: true
  figure_caption: |
    This figure shows time slices of the ancestral lineages of dominant digital organisms from
    100 independent replicates of evolution using the Avida Digital Evolution Platform.
    Each lineage is represented as a vertical sequence of states over time where states
    are defined by the phenotype of ancestral organisms on the lineage. State changes
    imply a change in phenotype along the lineage.
    
    In this particular condition, digital organisms must evolve a form of phenotypic 
    plasticity: the ability to alter their phenotype depending on the current state
    of the environment. In this case, the environment cycles between two possible
    states at a regular interval. 
    
    Time (updates) flows from top to bottom of the figure. The environment is given
    by the left-most vertical bar. Each lineage state sequence is represented
    by a single vertical bar, and states along the sequence are denoted by color.
    This type of visualization lets us see, at a glance, how lineages traversed
    phenotype space in route to the evolution of phenotypic plasticity.
    
    For full context on this experiment and visualization, see [this paper](https://doi.org/10.7551/978-0-262-33936-0-ch063).

  description: |
    Phenotypic plasticity is the capacity of a genotype to express different
    phenotypes (*e.g.*, traits or characteristics) in response to different 
    environmental conditions. Plasticity is often leveraged as a strategy to 
    cope with heterogenous environments. In computer science, our computer programs
    are often plastic in the sense that they may perform different computations
    in response to different types of input.
    The programmatic underpinning of many types of computational plasticity
    are flow control statements (e.g., `if` or `while`).
    In biological organisms, the genetic underpinning of many types of phenotpyic
    plasticity is gene regulation.

    The goal of this research is to study the step-by-step process by which gene
    regulation and phenotypic plasticity evolve. See [this paper](https://doi.org/10.7551/978-0-262-33936-0-ch063) for work using
    Avida to observe the step-by-step process by which phenotypic plasticity evolves.
    Currently, I am working on extending SignalGP to allow for more biologically
    inspired forms of function regulation, making it a good model for studying the
    process by which gene regulation and any resulting phenotypic plasticity evolves.
